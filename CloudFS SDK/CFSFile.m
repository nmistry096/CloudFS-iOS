////  CFSFile.m//  CloudFS SDK////  CloudFS iOS SDK//  Copyright (C) 2015 Bitcasa, Inc.//  1200 Park Place, Suite 350//  San Mateo, CA 94403////  All rights reserved.////  For support, please send email to sdks@bitcasa.com.//#import "CFSFile.h"#import "CFSRestAdapter.h"#import "CFSErrorUtil.h"@interface CFSFile ()@property (nonatomic, retain, readwrite) NSString *path;@property (nonatomic, retain, readwrite) NSString *itemId;@property (nonatomic, retain, readwrite) NSString *type;@property (nonatomic, retain, readwrite) NSString *parentId;@property (nonatomic, readwrite) int64_t version;@property (nonatomic, retain, readwrite) NSDate *dateContentLastModified;@property (nonatomic, retain, readwrite) NSDate *dateMetaLastModified;@property (nonatomic, retain, readwrite) NSDate *dateCreated;@property (nonatomic, readwrite) BOOL isMirrored;@property (nonatomic, readwrite, setter=setAppdata:) NSString *applicationData;@property (nonatomic, readwrite, setter=setItemName:) NSString *name;@endNSString* const CFSresponseMimeKey = @"mime";NSString* const CFSresponseExtensionKey = @"extension";NSString* const CFSresponseSizeKey = @"size";@implementation CFSFile@dynamic path;@dynamic itemId;@dynamic type;@dynamic parentId;@dynamic version;@dynamic dateContentLastModified;@dynamic dateMetaLastModified;@dynamic dateCreated;@dynamic isMirrored;@dynamic name;@dynamic applicationData;- (instancetype)initWithDictionary:(NSDictionary *)dictionary           andParentPath:(NSString *)parentPath          andRestAdapter:(CFSRestAdapter *)restAdapter;{    self = [super initWithDictionary:dictionary                       andParentPath:parentPath                      andRestAdapter:restAdapter];    if (self) {        _size = [dictionary[CFSresponseSizeKey] longLongValue];        _mime = dictionary[CFSresponseMimeKey];        _extension = dictionary[CFSresponseExtensionKey];    }        return self;}- (void)download:(NSString *)localDestinationPath        progress:(CFSFileTransferProgress)progress      completion:(CFSFileTransferCompletion)completion{    if (![self validateOperation:CFSOperationDownload]) {        completion(0, nil, nil ,[CFSErrorUtil errorWithMessage:CFSOperationNotAllowedError]);    }        [_restAdapter downloadFile:self                            to:localDestinationPath                      progress:progress                    completion:completion];}- (void)versionsWithStartVersion:(NSNumber *)startVersion                  endVersion:(NSNumber *)endVersion                       limit:(NSNumber *)limit              withCompletion:(void (^)(NSArray *items, CFSError *error))completion{    if (![self validateOperation:CFSOperationVersions]) {        completion(nil ,[CFSErrorUtil errorWithMessage:CFSOperationNotAllowedError]);    }        [_restAdapter getVersionsOfFile:self.path                       startVersion:startVersion                         endVersion:endVersion                              limit:limit                         completion:^(NSArray *items, CFSError *error) {        completion(items, error);    }];}- (void)readWithCompletion:(void (^)(NSInputStream *))completion{    if (![self validateOperation:CFSOperationRead]) {        completion(nil);    }        [_restAdapter inputStreamOfFile:self completion:completion];}- (BOOL)setMime:(NSString *)newMime{    if (![self validateOperation:CFSOperationChangeAttribute]) {        return NO;    }        NSMutableDictionary *meta = [[NSMutableDictionary alloc]init];    meta[CFSresponseMimeKey] = newMime;    meta[CFSResponseVersionKey] = [@(self.version) stringValue];    CFSError *error;    NSDictionary *newMeta = [_restAdapter alterMetaDataSyncWithPath:self.path meta:meta type:self.type error:&error];    BOOL success = NO;    if (!error) {        [self setItemAttributes:newMeta];        success = ([_mime isEqualToString:newMime]);    }        return success;}- (void)downloadUrlWithCompletion:(void (^)(NSString *))completion{    if (![self validateOperation:CFSOperationDownloadLink]) {        completion(nil);    }        [_restAdapter downloadUrlOfFile:self completion:completion];}- (BOOL)changeAttributes:(NSDictionary *)values ifConflict:(VersionExists)ifConflict{    return [super changeAttributes:values ifConflict:ifConflict];}- (BOOL)setApplicationData:(NSDictionary *)applicationData{    return [super setApplicationData:applicationData];}- (BOOL)setName:(NSString *)name{    return [super setName:name];}- (void)setItemAttributes:(NSDictionary *)values{    _size = [values[CFSresponseSizeKey] longLongValue];    _mime = values[CFSresponseMimeKey];    _extension = values[CFSresponseExtensionKey];    self.name = values[CFSResponseNameKey];    self.dateContentLastModified = [NSDate dateWithTimeIntervalSince1970:[values[CFSResponseDateContentLastModifiedKey] doubleValue]];    self.dateCreated = [NSDate dateWithTimeIntervalSince1970:[values[CFSResponseDateCreatedKey] doubleValue]];    self.version = [values[CFSResponseVersionKey] integerValue];    self.applicationData = values[CFSResponseApplicationDataKey];    self.dateMetaLastModified = [NSDate dateWithTimeIntervalSince1970:[values[CFSResponseDateMetaLastModifiedKey] doubleValue]];    self.parentId = values[CFSResponseParentIdKey];    self.isMirrored = [values[CFSResponseIsMirroredKey] boolValue];    self.type = values[CFSResponseTypeKey];}@end